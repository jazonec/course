name: Telegram Bot CI

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - 'workshop/**'
      - '.github/workflows/tg_bot.yml'

env:
  PROJECT_NAME: tg-bot_gpt
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  pylint:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            telegram-bot:
              - 'workshop/telegram_bot/**'
            webconsole:
              - 'workshop/webconsole/**'

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Install telegram-bot requirements
        if: steps.filter.outputs.telegram-bot == 'true'
        run: |
          pip install -r requirements.txt
        working-directory: ./workshop/telegram_bot

      - name: Install webconsole requirements
        if: steps.filter.outputs.webconsole == 'true'
        run: |
          pip install -r requirements.txt
        working-directory: ./workshop/webconsole

      - name: Analysing telegram-bot with pylint
        if: steps.filter.outputs.telegram-bot == 'true'
        run: |
          pylint *.py
        working-directory: ./workshop/telegram_bot/app

      - name: Analysing webconsole with pylint
        if: steps.filter.outputs.webconsole == 'true'
        run: |
          pylint *.py
        working-directory: ./workshop/webconsole

  build_and_push:
    outputs:
      new_tag_liquibase: ${{ steps.push_image.outputs.new_tag_liquibase }}
      new_tag_telegram_bot: ${{ steps.push_image.outputs.new_tag_telegram_bot }}
    needs:
      - pylint
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir:
          - telegram_bot
          - webconsole
          - liquibase
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        working-directory: ./workshop/${{ matrix.dir }}
        run: docker build . --file Dockerfile --tag $PROJECT_NAME

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        id: push_image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}-${{ matrix.dir }}
          CURRENT_BRANCH=${{ github.head_ref || github.ref_name }} 
          if [ "$CURRENT_BRANCH" == "main" ]; then
            TAG=latest
          else
            TAG="$CURRENT_BRANCH"
          fi
          docker tag $PROJECT_NAME $IMAGE_ID:$TAG
          docker push $IMAGE_ID:$TAG
          echo "new_tag_${{ matrix.dir }}=$TAG" >> $GITHUB_OUTPUT

  deploy:
    runs-on: ubuntu-latest
    needs:
      - build_and_push
    steps:
      - uses: actions/checkout@v4

      - name: EKS login
        run: aws eks --region ${{ vars.AWS_REGION }} \
          update-kubeconfig --name ${{ vars.EKS_NAME }}

      - uses: azure/setup-helm@v4.2.0

      - name: helm upgrade --install
        run: |
          helm \
          upgrade --install \
          --namespace ${{ vars.KUBE_NS }} \
          --create-namespace \
          telegram_bot \
          --set image_bot.tag=${{ needs.build_and_push.outputs.new_tag_telegram_bot }} \
          --set image_liquibase.tag=${{ needs.build_and_push.outputs.new_tag_liquibase }} \
          --wait \
          ./telegram_bot
        working-directory: ./workshop/charts
