name: Telegram Bot CI

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
    paths:
      - 'workshop/**'

env:
  PROJECT_NAME: tg-bot_gpt

jobs:
  pylint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            telegram-bot:
              - 'workshop/telegram-bot/**'
            webconsole:
              - 'workshop/webconsole/**'

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pylint
        run: |
          python -m pip install --upgrade pip
          pip install pylint

      - name: Install telegram-bot requirements
        if: steps.filter.outputs.telegram-bot == 'true'
        run: |
          pip install -r requirements.txt
        working-directory: ./workshop/telegram-bot/app

      - name: Install webconsole requirements
        if: steps.filter.outputs.webconsole == 'true'
        run: |
          pip install -r requirements.txt
        working-directory: ./workshop/webconsole

      - name: Analysing telegram-bot with pylint
        if: steps.filter.outputs.telegram-bot == 'true'
        run: |
          pip install -r requirements.txt
          pylint *.py
        working-directory: ./workshop/telegram-bot/app

      - name: Analysing webconsole with pylint
        if: steps.filter.outputs.webconsole == 'true'
        run: |
          pip install -r requirements.txt
          pylint *.py
        working-directory: ./workshop/webconsole

  build_and_push:
#    needs:
#      - pylint
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir:
          - telegram-bot
          - webconsole
          - liquibase
    steps:
      - uses: actions/checkout@v4

      - name: Build image
        working-directory: ./workshop/${{ matrix.dir }}
        run: docker build . --file Dockerfile --tag $PROJECT_NAME

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/${{ env.PROJECT_NAME }}-${{ matrix.dir }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "main" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $PROJECT_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
